reverse([], Y, R) :-
    R = Y.
reverse([H|T] , Y, R) :-
    reverse(T, [H|Y], R).
   

factorial(0,1).
factorial(N,M) :-
N>0,
N1 is N-1,
factorial(N1, M1),
M is N*M1.


fib(1, 1).
fib(2, 1).
fib(N, F) :-
N > 1,
N1 is N-1,
N2 is N-2,
fib(N1, F1),
fib(N2, F2),
F is F1+F2.


mem(X,[X|_]).
mem(X,[_|T]):- mem(X,T). 
 insert(L,[_X|_Y],[L|_]).
 insert(L,P,[X|Y],[X|M]):-
 P>1,
 P1 is P-1,
 insert(L,P1,Y,M).
 insert(L,1,[X|Y],M):- append([L],[X|Y],M).


del(1,[_|T],T).
del(P,[X|Y],[X|R]):-
 P1 is P-1,
 del(P1,Y,R).


del(1,[_|T],T).
del(P,[X|Y],[X|R]):-
 P1 is P-1,
 del(P1,Y,R).
/* delete before and after. */
daltob(P,L,R):-
 P1 is P-1,
 del(P1,L,R1),
 /* delete before. */
 del(P,R1,R).
 /* delete after. */
 

palind([]):- write('palindrome').
palind([_]):- write('palindrome').
palind(L) :-append([H|T], [H], L),palind(T);
 write('Not a palindrome').
 
 
 sumlist([],0).
sumlist([H|T],SUM):- sumlist(T,SUM1), SUM is H+SUM1.

max([X], X):-!.
max([X|T], M):-max(T, M), M>=X.
max([X|T], X):-max(T, M), X>M.


append_list([], L2, L2).
append_list([X|L1], L2, [X|L3]) :- append_list(L1, L2, L3).

insert(L, X, NL):- append_list(L, [X], NL).
